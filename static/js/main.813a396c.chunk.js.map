{"version":3,"sources":["theme.ts","components/Container/Container.tsx","components/WeatherBox/WeatherBox.tsx","components/DailyBox/DailyBox.tsx","utils/groupData.ts","components/InputSearch/InputSearch.tsx","components/Button/Button.tsx","store/weatherForecast/actions.ts","views/WeatherForecast/consts.ts","views/WeatherForecast/WeatherForecast.tsx","App.tsx","store/weatherForecast/service.ts","store/weatherForecast/reducer.ts","store/saga.ts","store/store.ts","serviceWorker.ts","index.tsx"],"names":["theme","colors","blue","white","black","grey","containerWidth","metrics","metricXL","metricL","metricM","metricBase","metricS","metricXS","shadow","breakPoints","tablet","smallDesktop","styled","baseStyled","StyledContainer","div","props","Container","children","StyledWrapper","StyledValue","WeatherBox","time","mainInfo","icon","locale","format","date","src","alt","Math","round","temp","humidity","StyledDailyBox","StyledDate","span","StyledWeatherBoxWrapper","StyledStats","DailyBox","arr","data","day","min","map","item","main","max","getMax","reduce","a","b","length","getMean","info","i","key","weather","dt_txt","StyledInputSearch","input","InputSearch","onChange","type","placeholder","StyledButton","button","Button","text","onClick","fetchWeatherForecast","createAction","fetchWeatherForecastSuccess","fetchWeatherForecastFailure","statusCodes","StyledWeatherForecast","StyledSearchWrapper","StyledHeader","h1","WeatherForecast","React","useState","undefined","town","setTown","dispatch","useDispatch","useSelector","state","statusCode","weatherForecastList","city","isLoading","event","target","value","color","height","width","preventDefault","Object","keys","GlobalStyles","createGlobalStyle","App","fetchWeatherForecastService","fetch","process","result","json","onFetchWeatherForecast","initialState","error","weatherForecastReducer","createReducer","weatherForecast","cod","name","list","weatherForecastData","days","row","split","payload","put","console","log","weatherForecastSaga","takeEvery","rootSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","trace","traceLimit","store","createStore","applyMiddleware","run","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.813a396c.chunk.js","sourcesContent":["import baseStyled, { ThemedStyledInterface } from 'styled-components';\n\nconst colors = {\n  blue: '#158ca1',\n  white: '#fff',\n  black: '#000',\n  grey: '#f3f4f8',\n};\n\nconst metrics = {\n  metricXL: '90px',\n  metricL: '60px',\n  metricM: '45px',\n  metricBase: '30px',\n  metricS: '15px',\n  metricXS: '5px',\n};\n\nconst breakPoints = {\n  tablet: 768,\n  smallDesktop: 1100,\n};\n\nconst shadow = '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)';\n\nconst containerWidth = '1300px';\n\nexport const theme = {\n  colors,\n  containerWidth,\n  metrics,\n  shadow,\n  breakPoints,\n};\n\nexport type Theme = typeof theme;\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import React from 'react';\nimport { styled } from '../../theme';\n\ninterface IContainerProps {\n  children: React.ReactNode;\n}\n\nconst StyledContainer = styled.div`\n  max-width: ${(props) => props.theme.containerWidth};\n  margin: 0 auto;\n  padding: 0 ${(props) => props.theme.metrics.metricBase};\n  @media (min-width: ${(props) => props.theme.breakPoints.tablet}) {\n    padding: 0 ${(props) => props.theme.metrics.metricL};\n  }\n  @media (min-width: ${(props) => props.theme.breakPoints.smallDesktop}) {\n    padding: 0 ${(props) => props.theme.metrics.metricXL};\n  }\n`;\n\nconst Container: React.FC<IContainerProps> = ({ children }) => <StyledContainer>{children}</StyledContainer>;\n\nexport default Container;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Moment from 'react-moment';\nimport 'moment/locale/pl';\n\ninterface IWeatherBoxProps {\n  mainInfo: any;\n  time: string;\n  icon: string;\n}\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n  padding: ${(props) => props.theme.metrics.metricS};\n`;\n\nconst StyledValue = styled.div`\n  color: ${(props) => props.theme.colors.blue};\n  text-align: center;\n  margin-bottom: ${(props) => props.theme.metrics.metricXS};\n`;\n\nconst WeatherBox: React.FC<IWeatherBoxProps> = ({ time, mainInfo, icon }) => {\n  return (\n    <StyledWrapper>\n      <StyledValue>\n        <Moment locale=\"pl\" format=\"LT\" date={time} />\n      </StyledValue>\n      <img src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"icon\" />\n      <StyledValue>{Math.round(mainInfo.temp)} &#186;C</StyledValue>\n      <StyledValue>Wilgotność: {mainInfo.humidity}%</StyledValue>\n    </StyledWrapper>\n  );\n};\n\nexport default WeatherBox;\n","import React from 'react';\nimport { styled } from '../../theme';\nimport { getMax, getMin, getMean } from '../../utils/groupData';\nimport Moment from 'react-moment';\nimport 'moment/locale/pl';\nimport WeatherBox from '../WeatherBox/WeatherBox';\n\ninterface IDailyBoxProps {\n  data: any;\n  day: string;\n}\n\nconst StyledDailyBox = styled.div`\n  position: relative;\n  border: 1px solid ${(props) => props.theme.colors.grey};\n  padding: 20px;\n  box-shadow: ${(props) => props.theme.shadow};\n  border-radius: 10px;\n  width: 100%;\n  margin-bottom: ${(props) => props.theme.metrics.metricM};\n`;\n\nconst StyledDate = styled.span`\n  font-style: italic;\n  display: block;\n`;\n\nconst StyledWeatherBoxWrapper = styled.div`\n  display: flex;\n  max-width: 100%;\n  overflow-x: auto;\n`;\n\nconst StyledStats = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst StyledValue = styled.div`\n  color: ${(props) => props.theme.colors.blue};\n  text-align: center;\n  margin-left: ${(props) => props.theme.metrics.metricS};\n`;\n\nconst DailyBox: React.FC<IDailyBoxProps> = ({ data, day }) => (\n  <StyledDailyBox>\n    <StyledStats>\n      <h3>\n        <Moment locale=\"pl\" format=\"dddd\" date={day} />\n        <StyledDate>{day}</StyledDate>\n      </h3>\n      <StyledValue>Min: {getMin(data)}&#186;C</StyledValue>\n      <StyledValue>Max: {getMax(data)}&#186;C</StyledValue>\n      <StyledValue>Śr: {getMean(data.map((temp) => temp.main.temp))} &#186;C</StyledValue>\n    </StyledStats>\n    <StyledWeatherBoxWrapper>\n      {data.map((info, i) => (\n        <WeatherBox key={i} icon={info.weather[0].icon} mainInfo={info.main} time={info.dt_txt} />\n      ))}\n    </StyledWeatherBoxWrapper>\n  </StyledDailyBox>\n);\n\nexport default DailyBox;\n","export const groupDays = (weatherForecastData) => {\n  const groupedData = weatherForecastData.reduce((days, row) => {\n    const date = row.dt_txt.split(' ')[0];\n    days[date] = [...(days[date] ? days[date] : []), row];\n    return days;\n  }, {});\n\n  return groupedData;\n};\n\nexport const getMax = (arr) => Math.round(Math.max(...arr.map((item) => item.main.temp)));\n\nexport const getMin = (arr) => Math.round(Math.min(...arr.map((item) => item.main.temp)));\n\nexport const getMean = (arr) => Math.round(arr.reduce((a, b) => a + b) / arr.length);\n","import React from 'react';\nimport { styled } from '../../theme';\n\ninterface IInputSearchProps {\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  width: 300px;\n  margin-bottom: ${(props) => props.theme.metrics.metricS};\n`;\n\nconst StyledInputSearch = styled.input`\n  width: 100%;\n  border: none;\n  border-bottom: 1px solid ${(props) => props.theme.colors.blue};\n  outline: none;\n  padding: ${(props) => props.theme.metrics.metricXS} 0;\n`;\n\nconst InputSearch: React.FC<IInputSearchProps> = ({ onChange }) => {\n  return (\n    <StyledWrapper>\n      <StyledInputSearch onChange={onChange} type=\"text\" placeholder=\"Wpisz nazwę miasta\" />\n    </StyledWrapper>\n  );\n};\n\nexport default InputSearch;\n","import React from 'react';\nimport { styled } from '../../theme';\n\ninterface IButtonProps {\n  text: string;\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst StyledButton = styled.button`\n  border: 1px solid ${(props) => props.theme.colors.blue};\n  background-color: transparent;\n  padding: ${(props) => props.theme.metrics.metricS};\n  width: 300px;\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${(props) => props.theme.colors.blue};\n    color: ${(props) => props.theme.colors.white};\n  }\n`;\n\nconst Button: React.FC<IButtonProps> = ({ text, onClick }) => {\n  return <StyledButton onClick={onClick}>{text}</StyledButton>;\n};\n\nexport default Button;\n","import { createAction } from 'redux-act';\n\nexport const fetchWeatherForecast = createAction<any>('Fetch weather forecast');\n\nexport const fetchWeatherForecastSuccess = createAction<any>('Fetch weather forecast success');\n\nexport const fetchWeatherForecastFailure = createAction<any>('Fetch weather forecast failure');\n","export const statusCodes = {\n  SUCCESS: '200',\n  NOT_FOUND: '404',\n};\n","import React from 'react';\nimport Container from '../../components/Container/Container';\nimport DailyBox from '../../components/DailyBox/DailyBox';\nimport InputSearch from '../../components/InputSearch/InputSearch';\nimport Button from '../../components/Button/Button';\nimport styled from 'styled-components';\nimport Loader from 'react-loader-spinner';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchWeatherForecast } from '../../store/weatherForecast/actions';\nimport { statusCodes } from './consts';\n\nconst StyledWeatherForecast = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  padding: ${(props) => props.theme.metrics.metricXL} 0;\n`;\n\nconst StyledSearchWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: ${(props) => props.theme.metrics.metricM};\n`;\n\nconst StyledHeader = styled.h1`\n  color: ${(props) => props.theme.colors.blue};\n  text-align: center;\n  margin-bottom: ${(props) => props.theme.metrics.metricL};\n`;\n\nconst WeatherForecast: React.FC = () => {\n  const [town, setTown] = React.useState(undefined);\n  const dispatch = useDispatch();\n  const { statusCode, weatherForecastList, city, isLoading } = useSelector((state: any) => state);\n\n  const fetchWeatherForecastHandler = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    if (town) {\n      dispatch(fetchWeatherForecast(town));\n    }\n    return;\n  };\n\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => setTown(event.target.value);\n\n  return (\n    <Container>\n      <StyledWeatherForecast>\n        <StyledHeader>Prognoza Pogody</StyledHeader>\n        <StyledSearchWrapper>\n          <InputSearch onChange={inputHandler} />\n          {!isLoading ? (\n            <Button text=\"Szukaj\" onClick={fetchWeatherForecastHandler} />\n          ) : (\n            <Loader type=\"Oval\" color=\"#158ca1\" height={50} width={50} />\n          )}\n        </StyledSearchWrapper>\n        {city && <h2>Miasto: {city}</h2>}\n        {weatherForecastList &&\n          statusCode === statusCodes.SUCCESS &&\n          Object.keys(weatherForecastList).map((key, i) => (\n            <DailyBox key={i} day={key} data={weatherForecastList[key]} />\n          ))}\n        {statusCode === statusCodes.NOT_FOUND && <p>Nie znaleziono miasta.</p>}\n      </StyledWeatherForecast>\n    </Container>\n  );\n};\n\nexport default WeatherForecast;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { ThemeProvider } from 'styled-components';\nimport WeatherForecast from './views/WeatherForecast/WeatherForecast';\nimport { theme } from './theme';\n\nconst GlobalStyles = createGlobalStyle`\nhtml {\n  font-size: 62.5%\n}\nbody {\n    font-family: 'Roboto', sans-serif;\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-rendering: optimizeLegibility;\n    font-size: 1.4rem;\n    overflow-x: hidden;\n}\nh1 {\n  font-size: 2.4rem;\n}\n`;\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <WeatherForecast />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","export const fetchWeatherForecastService = async ({ town }: { town: string }): Promise<any> => {\n  try {\n    const result = await fetch(\n      `${process.env.REACT_APP_API_URL}/forecast/?q=${town}&units=metric&APPID=${process.env.REACT_APP_API_KEY}&lang=pl`,\n    );\n    const data = await result.json();\n\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n","import { createReducer } from 'redux-act';\nimport { put, takeEvery } from 'redux-saga/effects';\nimport { fetchWeatherForecast, fetchWeatherForecastSuccess, fetchWeatherForecastFailure } from './actions';\nimport { fetchWeatherForecastService } from './service';\nimport { groupDays } from '../../utils/groupData';\n\nconst initialState: any = {\n  weatherForecastList: undefined,\n  statusCode: undefined,\n  city: undefined,\n  error: undefined,\n  isLoading: false,\n};\n\nexport const weatherForecastReducer = createReducer(\n  {\n    [fetchWeatherForecast as any]: (state: any) => ({\n      ...state,\n      isLoading: true,\n    }),\n    [fetchWeatherForecastSuccess as any]: (state: any, weatherForecast: any) => ({\n      ...state,\n      statusCode: weatherForecast.cod,\n      city: weatherForecast.city ? weatherForecast.city.name : undefined,\n      weatherForecastList: weatherForecast.list ? groupDays(weatherForecast.list) : undefined,\n      isLoading: false,\n    }),\n    [fetchWeatherForecastFailure as any]: (state: any, error: any) => ({\n      ...state,\n      error,\n      isLoading: false,\n    }),\n  },\n  initialState,\n);\n\nfunction* onFetchWeatherForecast({ payload }) {\n  try {\n    const weatherForecastData = yield fetchWeatherForecastService({ town: payload });\n\n    yield put(fetchWeatherForecastSuccess(weatherForecastData));\n  } catch (error) {\n    console.log(error);\n    yield put(fetchWeatherForecastFailure(error));\n  }\n}\n\nexport const weatherForecastSaga = takeEvery(fetchWeatherForecast, onFetchWeatherForecast);\n","import { weatherForecastSaga } from './weatherForecast/reducer';\n\nexport default function* rootSaga() {\n  yield weatherForecastSaga;\n}\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { weatherForecastReducer } from './weatherForecast/reducer';\nimport rootSaga from './saga';\nimport createSagaMiddleware from 'redux-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = composeWithDevTools({\n  trace: true,\n  traceLimit: 25,\n});\n\nconst store = createStore(weatherForecastReducer, composeEnhancers(applyMiddleware(sagaMiddleware)));\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}