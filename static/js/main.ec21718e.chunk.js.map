{"version":3,"sources":["theme.ts","components/Container/Container.styles.ts","components/Container/Container.tsx","components/WeatherBox/WeatherBox.styles.ts","components/WeatherBox/WeatherBox.tsx","components/DailyBox/DailyBox.styles.ts","components/DailyBox/DailyBox.tsx","utils/groupData.js","components/InputSearch/InputSearch.styles.ts","components/InputSearch/InputSearch.tsx","components/Button/Button.styles.ts","components/Button/Button.tsx","views/WeatherForecast/WeatherForecast.styles.ts","store/weatherForecast/weatherForecasttypes.ts","utils/consts.ts","store/weatherForecast/weatherForecastContext.tsx","store/app/app.types.ts","store/weatherForecast/weatherForecast.service.ts","store/app/app.context.tsx","views/WeatherForecast/WeatherForecast.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","colors","blue","white","black","grey","containerWidth","metrics","metricXL","metricL","metricM","metricBase","metricS","metricXS","shadow","breakPoints","tablet","smallDesktop","styled","baseStyled","StyledContainer","div","props","React","memo","children","StyledWrapper","StyledValue","WeatherBox","time","mainInfo","icon","temp","useMemo","Math","round","locale","format","date","src","alt","humidity","StyledDailyBox","StyledDate","span","StyledWeatherBoxWrapper","StyledStats","data","day","arr","min","max","map","item","main","meanTemp","reduce","a","b","length","info","i","key","weather","dt_txt","StyledInputSearch","input","onChange","onKeyPress","onKeyDown","type","placeholder","StyledButton","button","text","onClick","WeatherForecastActionType","StyledWeatherForecast","StyledSearchWrapper","StyledHeader","h1","statusCodes","AppActionType","initialState","weatherForecastList","undefined","statusCode","city","reducer","state","weatherForecastData","payload","FETCH_WEATHER_FORECAST","list","days","row","split","name","cod","WeatherForecastContext","createContext","WeatherForecastContextProvider","useReducer","weatherForecastState","weatherForecastDispatch","Provider","value","fetchWeatherForecastService","town","fetch","process","result","json","fetchWeatherForecastByLocationService","userLocation","lat","long","initialappState","error","isLoading","appState","LOADING","STOP_LOADING","GET_USER_LOCATION","cords","ERROR","AppContext","AppContextProvider","appDispatch","WeatherForecast","useState","setTown","useContext","useEffect","fetchWeatherForecastHandler","useCallback","event","location","preventDefault","forecast","inputHandler","target","Fragment","color","height","width","Object","keys","DailyBox","GlobalStyles","createGlobalStyle","App","navigator","geolocation","getCurrentPosition","position","positionCords","coords","latitude","longitude","maximumAge","timeout","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ec21718e.chunk.js","sourcesContent":["import baseStyled, { ThemedStyledInterface } from 'styled-components';\n\nconst colors = {\n  blue: '#158ca1',\n  white: '#fff',\n  black: '#000',\n  grey: '#f3f4f8',\n};\n\nconst metrics = {\n  metricXL: '90px',\n  metricL: '60px',\n  metricM: '45px',\n  metricBase: '30px',\n  metricS: '15px',\n  metricXS: '5px',\n};\n\nconst breakPoints = {\n  tablet: 768,\n  smallDesktop: 1100,\n};\n\nconst shadow = '0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)';\n\nconst containerWidth = '1300px';\n\nexport const theme = {\n  colors,\n  containerWidth,\n  metrics,\n  shadow,\n  breakPoints,\n};\n\nexport type Theme = typeof theme;\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import { styled } from '../../theme';\n\nexport const StyledContainer = styled.div`\n  max-width: ${(props) => props.theme.containerWidth};\n  margin: 0 auto;\n  padding: 0 ${(props) => props.theme.metrics.metricBase};\n  @media (min-width: ${(props) => props.theme.breakPoints.tablet}) {\n    padding: 0 ${(props) => props.theme.metrics.metricL};\n  }\n  @media (min-width: ${(props) => props.theme.breakPoints.smallDesktop}) {\n    padding: 0 ${(props) => props.theme.metrics.metricXL};\n  }\n`;","import React from 'react';\nimport { StyledContainer } from './Container.styles';\nimport { ContainerProps } from './Container.types';\n\nconst Container: React.FC<ContainerProps> = ({ children }) => <StyledContainer>{children}</StyledContainer>;\n\nexport default React.memo(Container);\n","import styled from 'styled-components';\n\nexport const StyledWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n  padding: ${(props) => props.theme.metrics.metricS};\n`;\n\nexport const StyledValue = styled.div`\n  color: ${(props) => props.theme.colors.blue};\n  text-align: center;\n  margin-bottom: ${(props) => props.theme.metrics.metricXS};\n  padding: 0 ${(props) => props.theme.metrics.metricXS};\n\n  &:first-of-type {\n    margin-left: ${(props) => props.theme.metrics.metricS};\n  }\n`;\n","import React, { useMemo } from 'react';\nimport Moment from 'react-moment';\nimport { StyledValue, StyledWrapper } from './WeatherBox.styles';\nimport { WeatherBoxProps } from './WeatherBox.types';\nimport 'moment/locale/pl';\n\nconst WeatherBox: React.FC<WeatherBoxProps> = ({ time, mainInfo, icon }) => {\n  const temp = useMemo(() => Math.round(mainInfo.temp), [mainInfo.temp]);\n  return (\n    <StyledWrapper>\n      <StyledValue>\n        <Moment locale=\"pl\" format=\"LT\" date={time} />\n      </StyledValue>\n      <img src={`https://openweathermap.org/img/w/${icon}.png`} alt=\"icon\" />\n      <StyledValue>{temp} &#186;C</StyledValue>\n      <StyledValue>Wilgotność: {mainInfo.humidity}%</StyledValue>\n    </StyledWrapper>\n  );\n};\n\nexport default WeatherBox;\n","import { styled } from '../../theme';\n\nexport const StyledDailyBox = styled.div`\n  position: relative;\n  border: 1px solid ${(props) => props.theme.colors.grey};\n  padding: 20px;\n  box-shadow: ${(props) => props.theme.shadow};\n  border-radius: 10px;\n  width: 100%;\n  margin-bottom: ${(props) => props.theme.metrics.metricM};\n`;\n\nexport const StyledDate = styled.span`\n  font-style: italic;\n  display: block;\n`;\n\nexport const StyledWeatherBoxWrapper = styled.div`\n  display: flex;\n  max-width: 100%;\n  overflow-x: auto;\n`;\n\nexport const StyledStats = styled.div`\n  display: flex;\n  align-items: center;\n`;","import React, { useMemo } from 'react';\nimport Moment from 'react-moment';\nimport WeatherBox from '../WeatherBox/WeatherBox';\nimport { StyledDailyBox, StyledDate, StyledStats, StyledWeatherBoxWrapper } from './DailyBox.styles';\nimport { getMinMax, getMeanTemp } from '../../utils/groupData';\nimport { StyledValue } from '../WeatherBox/WeatherBox.styles';\nimport { DailyBoxProps } from './DailyBox.types';\nimport 'moment/locale/pl';\n\nconst DailyBoxComponent: React.FC<DailyBoxProps> = ({ data, day }) => {\n  const { min, max } = useMemo(() => getMinMax(data), [data]);\n  const meanTemp = useMemo(() => getMeanTemp(data.map((temp) => temp.main.temp)), [data]);\n\n  return (\n    <StyledDailyBox>\n      <StyledStats>\n        <h3>\n          <Moment locale=\"pl\" format=\"dddd\" date={day} />\n          <StyledDate>{day}</StyledDate>\n        </h3>\n        <StyledValue>Min: {min}&#186;C</StyledValue>\n        <StyledValue>Max: {max}&#186;C</StyledValue>\n        <StyledValue>Śr: {meanTemp}&#186;C</StyledValue>\n      </StyledStats>\n      <StyledWeatherBoxWrapper>\n        {data.map((info, i) => (\n          <WeatherBox key={i} icon={info.weather[0].icon} mainInfo={info.main} time={info.dt_txt} />\n        ))}\n      </StyledWeatherBoxWrapper>\n    </StyledDailyBox>\n  );\n};\n\nexport default React.memo(DailyBoxComponent);\n","export const groupDays = (weatherForecastData) => {\n  const groupedData = weatherForecastData.reduce((days, row) => {\n    const date = row.dt_txt.split(' ')[0];\n    days[date] = [...(days[date] ? days[date] : []), row];\n    return days;\n  }, {});\n\n  return groupedData;\n};\n\nexport const getMinMax = (arr) => {\n  return {\n    min: Math.round(Math.max(...arr.map((item) => item.main.temp))),\n    max: Math.round(Math.min(...arr.map((item) => item.main.temp))),\n  };\n};\n\nexport const getMeanTemp = (arr) => Math.round(arr.reduce((a, b) => a + b) / arr.length);\n","import { styled } from '../../theme';\n\nexport const StyledWrapper = styled.div`\n  display: flex;\n  width: 300px;\n  margin-bottom: ${(props) => props.theme.metrics.metricS};\n`;\n\nexport const StyledInputSearch = styled.input`\n  width: 100%;\n  border: none;\n  border-bottom: 1px solid ${(props) => props.theme.colors.blue};\n  outline: none;\n  padding: ${(props) => props.theme.metrics.metricXS} 0;\n`;","import React from 'react';\nimport { StyledWrapper, StyledInputSearch } from './InputSearch.styles';\nimport { InputSearchProps } from './InputSearch.types';\n\nconst InputSearch: React.FC<InputSearchProps> = ({ onChange, onKeyPress }) => (\n  <StyledWrapper>\n    <StyledInputSearch onKeyDown={onKeyPress} onChange={onChange} type=\"text\" placeholder=\"Wpisz nazwę miasta\" />\n  </StyledWrapper>\n);\n\nexport default React.memo(InputSearch);\n","import { styled } from '../../theme';\n\nexport const StyledButton = styled.button`\n  border: 1px solid ${(props) => props.theme.colors.blue};\n  background-color: transparent;\n  padding: ${(props) => props.theme.metrics.metricS};\n  width: 300px;\n  transition: all 0.2s ease-in-out;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${(props) => props.theme.colors.blue};\n    color: ${(props) => props.theme.colors.white};\n  }\n`;\n","import React from 'react';\nimport { StyledButton } from './Button.styles';\nimport { ButtonProps } from './Button.types';\n\nconst Button: React.FC<ButtonProps> = ({ text, onClick }) => <StyledButton onClick={onClick}>{text}</StyledButton>;\n\nexport default React.memo(Button);\n","import styled from 'styled-components';\n\nexport const StyledWeatherForecast = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: column;\n  align-items: center;\n  padding: ${(props) => props.theme.metrics.metricXL} 0;\n`;\n\nexport const StyledSearchWrapper = styled.div`\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: ${(props) => props.theme.metrics.metricM};\n`;\n\nexport const StyledHeader = styled.h1`\n  color: ${(props) => props.theme.colors.blue};\n  text-align: center;\n  margin-bottom: ${(props) => props.theme.metrics.metricL};\n`;\n","export type WeatherForecastState = {\n  weatherForecastList: undefined | any;\n  statusCode: undefined | string;\n  city: undefined | string;\n};\n\nexport type FetchWeatherForecast = {\n  type: WeatherForecastActionType.FETCH_WEATHER_FORECAST;\n  payload: any;\n}\n\nexport type ProviderValue = {\n  weatherForecastState: WeatherForecastState;\n  weatherForecastDispatch: (action: FetchWeatherForecast) => void;\n};\n\nexport enum WeatherForecastActionType {\n  FETCH_WEATHER_FORECAST,\n}\n","export const statusCodes = {\n  SUCCESS: '200',\n  NOT_FOUND: '404',\n};\n","import React, { useReducer } from 'react';\nimport { groupDays } from '../../utils/groupData';\nimport {\n  ProviderValue,\n  FetchWeatherForecast,\n  WeatherForecastState,\n  WeatherForecastActionType,\n} from './weatherForecasttypes';\n\nconst initialState: WeatherForecastState = {\n  weatherForecastList: undefined,\n  statusCode: undefined,\n  city: undefined,\n};\n\nconst reducer = (state: WeatherForecastState, { type, payload }: FetchWeatherForecast) => {\n  switch (type) {\n    case WeatherForecastActionType.FETCH_WEATHER_FORECAST:\n      return {\n        ...state,\n        weatherForecastList: payload.list ? groupDays(payload.list) : undefined,\n        city: payload.city ? payload.city.name : undefined,\n        statusCode: payload.cod,\n      };\n  }\n};\n\nexport const WeatherForecastContext = React.createContext({} as ProviderValue);\n\nexport const WeatherForecastContextProvider = (props) => {\n  const [weatherForecastState, weatherForecastDispatch] = useReducer(reducer, initialState);\n\n  return (\n    <WeatherForecastContext.Provider value={{ weatherForecastState, weatherForecastDispatch }}>\n      {props.children}\n    </WeatherForecastContext.Provider>\n  );\n};\n","export type AppState = {\n  error: undefined | any;\n  isLoading: boolean;\n  userLocation: Cords;\n};\n\nexport type ProviderValue = {\n  appState: AppState;\n  appDispatch: (action: AppActions) => void;\n};\n\nexport type Cords = {\n  lat: number;\n  long: number;\n};\n\nexport type GetUserLocation = {\n  type: AppActionType.GET_USER_LOCATION;\n  cords: Cords;\n};\n\nexport type Loading = {\n  type: AppActionType.LOADING;\n};\n\nexport type StopLoading = {\n  type: AppActionType.STOP_LOADING;\n};\n\nexport type Error = {\n  type: AppActionType.ERROR;\n  error: any;\n};\n\nexport type AppActions = Loading | StopLoading | Error | GetUserLocation;\n\nexport enum AppActionType {\n  LOADING,\n  STOP_LOADING,\n  ERROR,\n  GET_USER_LOCATION,\n}","import { Cords } from '../app/app.types';\n\nexport const fetchWeatherForecastService = async ({ town }: { town: string }): Promise<any> => {\n  try {\n    const result = await fetch(\n      `${process.env.REACT_APP_API_URL}/forecast/?q=${town}&units=metric&APPID=${process.env.REACT_APP_API_KEY}&lang=pl`,\n    );\n    const data = await result.json();\n\n    return data;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const fetchWeatherForecastByLocationService = async ({\n  userLocation,\n}: {\n  userLocation: Cords;\n}): Promise<any> => {\n  try {\n    const result = await fetch(\n      `${process.env.REACT_APP_API_URL}/forecast/?lat=${userLocation.lat}&lon=${userLocation.long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}&lang=pl`,\n    );\n    const data = await result.json();\n\n    return data;\n  } catch (error) {\n    return error;\n  }\n};","import React, { useReducer } from 'react';\nimport { AppActionType, ProviderValue, AppState, AppActions } from './app.types';\n\nconst initialappState: AppState = {\n  error: undefined,\n  isLoading: false,\n  userLocation: {\n    lat: undefined,\n    long: undefined,\n  },\n};\n\nconst reducer = (appState: AppState, payload: AppActions) => {\n  switch (payload.type) {\n    case AppActionType.LOADING:\n      return { ...appState, isLoading: true };\n    case AppActionType.STOP_LOADING:\n      return {\n        ...appState,\n        isLoading: false,\n      };\n    case AppActionType.GET_USER_LOCATION:\n      return {\n        ...appState,\n        userLocation: payload.cords ? payload.cords : appState.userLocation,\n      };\n    case AppActionType.ERROR:\n      return { ...appState, error: payload.error };\n  }\n};\n\nexport const AppContext = React.createContext({} as ProviderValue);\n\nexport const AppContextProvider = (props) => {\n  const [appState, appDispatch] = useReducer(reducer, initialappState);\n\n  return <AppContext.Provider value={{ appState, appDispatch }}>{props.children}</AppContext.Provider>;\n};\n","import React, { useContext, useCallback, useEffect } from 'react';\nimport Container from '../../components/Container/Container';\nimport DailyBox from '../../components/DailyBox/DailyBox';\nimport InputSearch from '../../components/InputSearch/InputSearch';\nimport Button from '../../components/Button/Button';\nimport Loader from 'react-loader-spinner';\nimport { StyledHeader, StyledSearchWrapper, StyledWeatherForecast } from './WeatherForecast.styles';\nimport { statusCodes } from '../../utils/consts';\nimport { WeatherForecastContext } from '../../store/weatherForecast/weatherForecastContext';\nimport {\n  fetchWeatherForecastByLocationService,\n  fetchWeatherForecastService,\n} from '../../store/weatherForecast/weatherForecast.service';\nimport { AppContext } from '../../store/app/app.context';\nimport { WeatherForecastActionType } from '../../store/weatherForecast/weatherForecasttypes';\nimport { AppActionType, Cords } from '../../store/app/app.types';\n\nconst WeatherForecast: React.FC = () => {\n  const [town, setTown] = React.useState(undefined);\n  const { weatherForecastDispatch, weatherForecastState } = useContext(WeatherForecastContext);\n  const {\n    appDispatch,\n    appState: { isLoading, userLocation },\n  } = useContext(AppContext);\n\n  useEffect(() => {\n    userLocation.lat && userLocation.long && fetchWeatherForecastHandler(null, userLocation);\n  }, [userLocation.lat, userLocation.long]);\n\n  const fetchWeatherForecastHandler = useCallback(\n    async (event?: React.MouseEvent<HTMLButtonElement>, location?: Cords) => {\n      event && event.preventDefault();\n\n      if (town || (location.lat && location.long)) {\n        let forecast;\n        appDispatch({ type: AppActionType.LOADING });\n\n        try {\n          town\n            ? (forecast = await fetchWeatherForecastService({ town }))\n            : (forecast = await fetchWeatherForecastByLocationService({ userLocation: location }));\n\n          weatherForecastDispatch({ type: WeatherForecastActionType.FETCH_WEATHER_FORECAST, payload: forecast });\n        } catch (error) {\n          appDispatch({ type: AppActionType.ERROR, error: error });\n        }\n\n        appDispatch({ type: AppActionType.STOP_LOADING });\n      }\n      return;\n    },\n    [town, userLocation],\n  );\n\n  const inputHandler = useCallback((event: React.ChangeEvent<HTMLInputElement>) => setTown(event.target.value), []);\n\n  const handleKeypress = (event: React.KeyboardEvent<HTMLInputElement>) =>\n    event.key === 'Enter' && fetchWeatherForecastHandler();\n\n  const { city, statusCode, weatherForecastList } = weatherForecastState;\n\n  return (\n    <Container>\n      <StyledWeatherForecast>\n        <StyledHeader>Prognoza Pogody</StyledHeader>\n        <StyledSearchWrapper>\n          {!isLoading ? (\n            <React.Fragment>\n              <InputSearch onChange={inputHandler} onKeyPress={handleKeypress} />\n              <Button text=\"Szukaj\" onClick={fetchWeatherForecastHandler} />\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <p>Wyszukiwanie miasta</p>\n              <Loader type=\"Oval\" color=\"#158ca1\" height={50} width={50} />\n            </React.Fragment>\n          )}\n        </StyledSearchWrapper>\n        {city && <h2>Miasto: {city}</h2>}\n        {statusCode &&\n          statusCode === statusCodes.SUCCESS &&\n          weatherForecastList &&\n          Object.keys(weatherForecastList).map((key, i) => (\n            <DailyBox key={i} day={key} data={weatherForecastList[key]} />\n          ))}\n        {statusCode && statusCode === statusCodes.NOT_FOUND && <p>Nie znaleziono miasta.</p>}\n      </StyledWeatherForecast>\n    </Container>\n  );\n};\n\nexport default WeatherForecast;\n","import React, { useEffect, useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { ThemeProvider } from 'styled-components';\nimport WeatherForecast from './views/WeatherForecast/WeatherForecast';\nimport { theme } from './theme';\nimport { WeatherForecastContextProvider } from './store/weatherForecast/weatherForecastContext';\nimport { AppActionType } from './store/app/app.types';\nimport { AppContext } from './store/app/app.context';\n\nconst GlobalStyles = createGlobalStyle`\nhtml {\n  font-size: 62.5%\n}\nbody {\n    font-family: 'Roboto', sans-serif;\n    margin: 0;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    text-rendering: optimizeLegibility;\n    font-size: 1.4rem;\n    overflow-x: hidden;\n}\nh1 {\n  font-size: 2.4rem;\n}\n`;\n\nconst App: React.FC = () => {\n  const { appDispatch } = useContext(AppContext);\n\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const positionCords = {\n            lat: position.coords.latitude,\n            long: position.coords.longitude,\n          };\n\n          appDispatch({ type: AppActionType.GET_USER_LOCATION, cords: positionCords });\n        },\n        (error) => {\n          appDispatch({ type: AppActionType.ERROR, error: error });\n        },\n        { maximumAge: 600000, timeout: 10000 },\n      );\n    }\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <WeatherForecastContextProvider>\n        <WeatherForecast />\n      </WeatherForecastContextProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppContextProvider } from './store/app/app.context';\n\nReactDOM.render(\n  <AppContextProvider>\n    <App />\n  </AppContextProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}